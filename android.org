* Android

** Emulator
http://developer.android.com/guide/developing/devices/emulator.html

Check the port number on the title
> telnet localhost [port]

*** commands
- Change network speed to EDGE
network speed edge
- Change network speed to full
network speed full
- Set battery capacity
power capacity [value]
- Disconnect battery charger
power status not-charging
- Send SMS
sms send [number] "[text]"

*** Communicate two emulators
- Make one emulator call the other: dial the port number

** Dalvik Debug Monitor Service: DDMS
*** File explorer
*** Logcat
*** Traceview
*** Hierarchyview
** Components
*** Activity
User interface
*** Service
Long running, UI-less processes
Interaction with remote processes
*** Broadcast Subscriber
Receives and reacts upon external or internal events.
Subscriber in publish/subscribe pattern.
Events are represented by the Intent class.
BroadcastReceiver receives and responds to broadcast events.
*** Content providers
Store and share data across applications
Uses database-style interface
Handles interprocess communication
** Building
http://developer.android.com/guide/developing/building
*** Define resources
http://developer.android.com/guide/topics/resources
Strings: strings, string arrays, plurals.
Typically stored in res/values-[country code]/*.xml
Accessed by other resources as @string/string_name
Accessed in Java as
R.string.string_name
*** Implement application classes
**** User Interface layout

Defined in XML files: res/layout/*.xml
Accessed in Java as: R.layout.layout_name
Accessed by other resources as: @layout/layout_name
The application can change the layout depending on the screen size or even the orientation: res/layout-land/main.xml

**** R.java
Generated at compile time from the resources.

**** onCreate() workflow
- Restore saved state:

#+BEGIN_SRC java
super.onCreate(savedInstanceState)
#+END_SRC

If we don't call super.onCreate(), it will raise an error.
- set content view

#+BEGIN_SRC java
setContentView(R.layout.main);
#+END_SRC

- initialize UI elements

#+BEGIN_SRC java
(EditText) findViewById(R.id.XX);
#+END_SRC

- Link UI elements to code actions

#+BEGIN_SRC java
button.setOnClickListener(new Button.OnClickListener() {
    public void onClick(View v) { ... } };
#+END_SRC

*** Package application

System packages application components and resources into a .apk file.
Developers specify required application information in a file classed AndroidManifest.xml

**** [[http://developer.android.com/guide/topics/manifest/manifest-intro.html][AndroidManifest.xml]]

Description file that must exist in the root folder of the application.

- Application name
- Components
- Other: required permissions, application features, minimun API level

*** Install and run application

Using emulators or physical devices.

[[http://developer.android.com/tools/publishing/app-signing.html][Sign the application]]

Install the application using

#+BEGIN_SRC sh
adb install
#+END_SRC

** Components

*** Activities

Provides a visual interface for user interaction

By convention, each activity typically supports one focused thing a user can do, and applications often comprise several activities.

Android supports navigation in several ways: tasks, the task backstack, suspending and resuming activities.

**** Task

A [[http://developer.android.com/guide/topics/fundamentals/tasks-and-back-stack.html][task]] is a set of related activities, which don't have to be part of the same application. Most tasks start at the home screen.
When the user presses the home button, the task is, at least temporarily, closed.

When an activity is launched, it goes on top of the backstack. When the activity is destroyed, it is popped off the backstack.
When a new activity is launched, the until-then-active is suspended, and resumed later when it becomes the top of the stack again.

**** Activity lifecycle

Activities are created, suspended, resumed and destroyed as necessary when an application executes.
The lifecycle depends on user behavior, and on Android itself.

States:

- Resumed/Running - the activity is visible, the user can interact with it.
- Paused - When it's visible, but the user can't interact with it, and can be terminated (after Android 3.0).
- Stopped - It's not visible, and can be terminated.

Android announces activity lifecycle state changes to activity by calling specific activity methods: onCreate, onStart, onResume, onPause, onRestart, onStop, onDestroy.

An activity is visible after it's been started and before it's been stopped. When being created or destroyed, or killed (triggering a re-create), it's not visible.
When killed by Android system, an activity need not to go through the onStop() step.

***** onCreate()

- Called when the activity is created
- sets up the initial state:
  - Call super.onCreate()
  - Set the activity's content view
  - Retain references to UI views as necessary
  - Configure views as necessary

***** onRestart()

- Called if the activity has been dropped and is about to be started again
- Typical actions:
  - Special processing needed only after having been stopped

***** onStart()

- Activity is about to become visible
- Typical actions:
  - Start when visible-only behaviors
  - Load persistent application state

***** onResume()

- Activity is visible and about to start interacting with the user
- Typical actions
  - Start foreground-only behaviors

***** onPause()

- Focus about to switch to another activity
- Typical actions:
  - Shutdown foreground-only behaviors
  - Save persistent state

***** onStop()

- Activity is no longer visible to the user, but may be restarted later.
- Typical actions:
  - Cache state
Note: It may not be called if Android kills your application due to low memory.
Consider moving shutdown logic to onPause().

***** onDestroy()

- Activity is about to be destroyed
- Typical actions
  - Release activity resources.
Note: It may not be called if Android kills your application due to low memory.
Consider moving shutdown logic to onPause().

**** Starting activities

- Create an Intent object specifying the activity to start.
- Pass this newly created Intent object to methods such as:
  - startActivity() -> Adds the new activity to the top of the backpack
  - startActivityForResult() -> Invokes a callback method on the callee (onActivityResult) when the called activity finishes, to return a result.

The new activity, when calling with startActivityForResult, is responsible of annotating its result via setResult() method on itself, passing
a result code (integer), and optionally an Intent object with additional data. As for the result code, there're some predefined values:
- RESULT_CANCELED: the user has canceled (via the back button for example).
- RESULT_OK: the activity was completed successfully.

*** Configuration changes

Device configuration (keyboard, orientation, locale, etc.) can change at runtime. When that happens, Android usually kills the current activity and then restarts it.

Since an activity can be restarted frequently, it should be fast.

If necessary, we can:
- Retain and object containing important state information during a configuration change.

Hard to recompute data can be cached to speed up handling of configuration changes, by overridding

#+BEGIN_SRC java
onRetainNonConfigurationInstance()
#+END_SRC

to build and return the configuration object. It will be called some time between onStop() and onDestroy().
Then, when the activity is restarted, that configuration object can be retrieved by calling

#+BEGIN_SRC java
getLastNonConfigurationInstance()
#+END_SRC

However, this approach is currently deprecated, in favor of methods in the Fragment class.

- Manually handle the configuration change.

We can prevent the system from restarting the activity, by declaring the configuration changes the activity
handles in AndroidManifest.xml file (android:configChanges="orientation|screensize|keyboardHidden" attribute in <android> element).

When dealing with configuration changes manually, Android calls

#+BEGIN_SRC java
onConfigurationChanged()
#+END_SRC
